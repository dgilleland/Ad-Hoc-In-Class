@{
    Page.Title = "Create Bank Account";
    Layout = "~/_Layout.cshtml";

    // A few page-global variables
    var accountAction = Request["accountAction"];
    var editAccount = new BankAccount();
    var controller = new BankAccountController("Mixed");
}

<div>
    <h1>@Page.Title</h1>

    <p>This illustrates some basic controls for creating a bank account.</p>
    <blockquote>
        <h4>Existing Accounts</h4>
        @{
            if (IsPost)
            {
                try
                {
                    // Handle the various button clicks
                    BankAccount account;
                    switch (accountAction)
                    {
                        case "Submit":
                            account = GetBankAccountFromForm();
                            controller.AddBankAccount(account);
                            @SuccessMessage("New account added");
                            break;
                        case "Edit":
                            var editNumber = Request["editAccountNumber"];
                            editAccount = controller.GetBankAccount(editNumber);
                            @SuccessMessage("Editing account #" + editAccount.AccountNumber);
                            break;
                        case "Update":
                            account = GetBankAccountFromForm();
                            controller.UpdateBankAccount(account);
                            @SuccessMessage("Account #" + account.AccountNumber + " was updated.");
                            break;
                        case "Purge Accounts":
                            controller.PurgeBankAccounts();
                            @SuccessMessage("All accounts deleted.");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    <p style="color:darkred; font-size:1.25em; font-weight:bold;">ERROR! @ex.Message</p>
                }
            }
        }
        @DisplayAccounts(controller)
    </blockquote>
    <form method="post">
        <p>Fill in the following form and click submit.</p>
        <fieldset>
            <legend>Account Details</legend>
            <label for="accountHolder">Account Holder</label>
            <input type="text" name="accountHolder" value="@editAccount.AccountHolder" />

            <label for="accountNumber">Account Number</label>
            <input type="text" name="accountNumber" value="@editAccount.AccountNumber" disabled="@(!string.IsNullOrEmpty(editAccount.AccountNumber))" />

            <label for="openingBalance">Opening Balance</label>
            <input type="number" name="openingBalance" value="@editAccount.OpeningBalance" />

            <label for="overdraftLimit">Overdraft Limit</label>
            <input type="number" name="overdraftLimit" value="@editAccount.OverdraftLimit" />

            <label for="accountType">Account Type</label>
            <select name="accountType">
                <option value="Chequing" selected="@(editAccount.AccountType == AccountType.Chequing)">Chequing</option>
                <option value="Savings" selected="@(editAccount.AccountType == AccountType.Savings)">Savings</option>
                <option value="Credit" selected="@(editAccount.AccountType == AccountType.Credit)">Credit</option>
            </select>

            <br />
            @ToggleInsertUpdate(accountAction)
        </fieldset>
    </form>
</div>

@functions {
    BankAccount GetBankAccountFromForm()
    {
        BankAccount account = new BankAccount();
        account.AccountHolder = Request["accountHolder"];
        account.AccountNumber = Request["accountNumber"];
        decimal temp;
        if (decimal.TryParse(Request["openingBalance"], out temp))
        {
            account.OpeningBalance = temp;
        }
        if (decimal.TryParse(Request["overdraftLimit"], out temp))
        {
            account.OverdraftLimit = temp;
        }
        AccountType tempType;
        if (Enum.TryParse<AccountType>(Request["accountType"], false, out tempType))
        {
            account.AccountType = tempType;
        }
        return account;
    }
}

@helper SuccessMessage(string message)
{
    <p style="color:#006400; font-size:1.05em; font-weight:bold;">@message</p>
}

@helper ToggleInsertUpdate(string buttonValue)
{
    if ("Edit".Equals(buttonValue))
    {
        <input type="submit" value="Update" name="accountAction" />
    }
    else
    {
        <input type="submit" value="Submit" name="accountAction" />
    }
}

@helper DisplayAccounts(BankAccountController controller)
{
    var data = controller.ListAllBankAccounts();
    WebGrid myGrid = new WebGrid(data);
    <div>
        @myGrid.GetHtml()
    </div>
    @*// display all the data
    foreach (var row in data)
    {
        <div>
            <form method="post">
                <input type="submit" value="Edit" name="accountAction" />
                <input type="hidden" value="@row.AccountNumber" name="editAccountNumber" />
                @row.AccountHolder has a @row.AccountType account.
            </form>
        </div>
    }*@
    <form method="post">
        <input type="submit" value="Purge Accounts" name="accountAction" />
    </form>
}
